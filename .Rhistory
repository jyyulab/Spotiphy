# library(hdf5r)
library(anndata)
start_time <- Sys.time()
spatial_count <-  read_h5ad("F:/Ziqian Zheng/Spotiphy_data/Simulated ST/Simulated_ST_221_1.h5ad")
spatial_count <- as.matrix(spatial_count)
spatial_count <- t(spatial_count)
rownames(spatial_count)[1:5]
colnames(spatial_count)[1:5]
dim(spatial_count)
end_time <- Sys.time()
cat("Execution time:", end_time - start_time, "\n")
spatial_location <- read.csv("F:/Ziqian Zheng/Spotiphy_data/ST/Sample221/outs/spatial/tissue_positions_list.csv", header=F, row.names=1)
spatial_location <- spatial_location[colnames(spatial_count), c(4, 5)]
colnames(spatial_location) <- c('x','y')
# rownames(spatial_location) = spatial_location_raw$X1
spatial_location <- spatial_location[order(rownames(spatial_location)),]
head(spatial_location)
dim(spatial_location)
assertthat::assert_that(all(rownames(spatial_location)==colnames(spatial_count)))
# scRNA <- readRDS("F:/Ziqian Zheng/Spotiphy_data/SCRNA/sum_19plus_anno_updated.rds")
scRNA <- readRDS("F:/Ziqian Zheng/Spatial omics/Public dataset/scRNA/snRNA_159738.rds")
sc_count = as.matrix(scRNA@assays$RNA@counts)
rownames(sc_count)[1:5]
colnames(sc_count)[1:5]
dim(sc_count)
sc_meta = data.frame(cellID=colnames(sc_count), cellType=scRNA@meta.data$Allen.subclass_label,
sampleInfo=scRNA@meta.data$orig.ident)
# sc_meta$cellType = droplevels(sc_meta$cellType)
rm(scRNA)
rownames(sc_meta) = colnames(sc_count)
head(sc_meta)
unique(sc_meta$cellType)
start_time <- Sys.time()
CARD_obj = createCARDObject(
sc_count = sc_count,
sc_meta = sc_meta,
spatial_count = spatial_count,
spatial_location = spatial_location,
ct.varname = "cellType",
ct.select = unique(sc_meta$cellType),
sample.varname = "sampleInfo",
minCountGene = 1000,
minCountSpot = 5)
end_time <- Sys.time()
cat("Execution time:", end_time - start_time, "\n")
start_time <- Sys.time()
CARD_obj = CARD_deconvolution(CARD_object = CARD_obj)
end_time <- Sys.time()
cat("Execution time:", end_time - start_time, "\n")
head(CARD_obj@Proportion_CARD)
write.csv(CARD_obj@Proportion_CARD, file = "results/simulation1/Proportion_CARD.csv")
dim(spatial_count)
dim(CARD_obj)
dim(CARD_obj@spatial_countMat)
dim(CARD_obj@spatial_location)
trace("CARD_deconvolution", edit=TRUE)
trace("CARD_deconvolution", edit=TRUE)
start_time <- Sys.time()
spatial_count <-  read_h5ad("F:/Ziqian Zheng/Spotiphy_data/Simulated ST/Simulated_ST_221_1.h5ad")
spatial_count <- as.matrix(spatial_count)
spatial_count <- t(spatial_count)
spatial_count <- spatial_count*9e5/colSums(spatial_count)
rownames(spatial_count)[1:5]
colnames(spatial_count)[1:5]
dim(spatial_count)
end_time <- Sys.time()
cat("Execution time:", end_time - start_time, "\n")
max(colSums(spatial_count))
spatial_count <- spatial_count*9e5/colSums(spatial_count)
max(colSums(spatial_count))
max(colSums(spatial_count))
spatial_count <- spatial_count*9e5/colSums(spatial_count)
max(colSums(spatial_count))
colSums(spatial_count)[:10]
colSums(spatial_count)[1:10]
spatial_count <- spatial_count/colSums(spatial_count)
max(colSums(spatial_count))
dim(spatial_count)
a <- Matrix::colSums(spatial_count)
a <- colSums(spatial_count)
a <- Matrix::colSums(spatial_count)
a <- colSums(spatial_count)
spatial_count <- spatial_count*9e5/as.vector(colSums(spatial_count))
max(colSums(spatial_count))
mat <- sparseMatrix(i = c(1, 2, 3, 1, 2, 3), j = c(1, 1, 1, 2, 2, 2), x = c(1, 2, 3, 4, 5, 6))
# normalize the matrix by column sum
normalized_mat <- mat / Matrix::colSums(mat)
# print the normalized matrix
print(normalized_mat)
a <- colSums(spatial_count)
spatial_count <-  read_h5ad("F:/Ziqian Zheng/Spotiphy_data/Simulated ST/Simulated_ST_221_1.h5ad")
spatial_count <- as.matrix(spatial_count)
spatial_count <- t(spatial_count)
a <- colSums(spatial_count)
a[1]
spatial_count[10, 10]
spatial_count[10, 1234]
spatial_count1 = spatial_count[:100, 100]
spatial_count1 = spatial_count[1:100, 1:100]
colSums(spatial_count1)
colSums(spatial_count1/colSums(spatial_count1))
colSums(spatial_count1/colSums(spatial_count1)[1])
trace("CARD_deconvolution", edit=TRUE)
start_time <- Sys.time()
spatial_count <-  read_h5ad("F:/Ziqian Zheng/Spotiphy_data/Simulated ST/Simulated_ST_221_1.h5ad")
spatial_count <- as.matrix(spatial_count)
spatial_count <- t(spatial_count)
rownames(spatial_count)[1:5]
colnames(spatial_count)[1:5]
dim(spatial_count)
end_time <- Sys.time()
cat("Execution time:", end_time - start_time, "\n")
trace("createCARDObject", edit=TRUE)
start_time <- Sys.time()
CARD_obj = createCARDObject(
sc_count = sc_count,
sc_meta = sc_meta,
spatial_count = spatial_count,
spatial_location = spatial_location,
ct.varname = "cellType",
ct.select = unique(sc_meta$cellType),
sample.varname = "sampleInfo",
minCountGene = 1000,
minCountSpot = 5)
end_time <- Sys.time()
cat("Execution time:", end_time - start_time, "\n")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/zzheng92/Desktop/CARD")
# library(scMINER)
library(Seurat)
library(CARD)  # deconvolution method
# library(rhdf5)  # read h5 file
# library(Matrix)
# library(readr)
# library(hdf5r)
library(anndata)
start_time <- Sys.time()
spatial_count <-  read_h5ad("F:/Ziqian Zheng/Spotiphy_data/Simulated ST/Simulated_ST_221_1.h5ad")
spatial_count <- as.matrix(spatial_count)
spatial_count <- t(spatial_count)
rownames(spatial_count)[1:5]
colnames(spatial_count)[1:5]
dim(spatial_count)
end_time <- Sys.time()
cat("Execution time:", end_time - start_time, "\n")
spatial_location <- read.csv("F:/Ziqian Zheng/Spotiphy_data/ST/Sample221/outs/spatial/tissue_positions_list.csv", header=F, row.names=1)
spatial_location <- spatial_location[colnames(spatial_count), c(4, 5)]
colnames(spatial_location) <- c('x','y')
# rownames(spatial_location) = spatial_location_raw$X1
spatial_location <- spatial_location[order(rownames(spatial_location)),]
head(spatial_location)
dim(spatial_location)
assertthat::assert_that(all(rownames(spatial_location)==colnames(spatial_count)))
# scRNA <- readRDS("F:/Ziqian Zheng/Spotiphy_data/SCRNA/sum_19plus_anno_updated.rds")
scRNA <- readRDS("F:/Ziqian Zheng/Spatial omics/Public dataset/scRNA/snRNA_159738.rds")
sc_count = as.matrix(scRNA@assays$RNA@counts)
rownames(sc_count)[1:5]
colnames(sc_count)[1:5]
dim(sc_count)
sc_meta = data.frame(cellID=colnames(sc_count), cellType=scRNA@meta.data$Allen.subclass_label,
sampleInfo=scRNA@meta.data$orig.ident)
# sc_meta$cellType = droplevels(sc_meta$cellType)
rm(scRNA)
rownames(sc_meta) = colnames(sc_count)
head(sc_meta)
unique(sc_meta$cellType)
trace("createCARDObject", edit=TRUE)
start_time <- Sys.time()
CARD_obj = createCARDObject(
sc_count = sc_count,
sc_meta = sc_meta,
spatial_count = spatial_count,
spatial_location = spatial_location,
ct.varname = "cellType",
ct.select = unique(sc_meta$cellType),
sample.varname = "sampleInfo",
minCountGene = 1000,
minCountSpot = 5)
end_time <- Sys.time()
cat("Execution time:", end_time - start_time, "\n")
dim(CARD_obj@spatial_countMat)
start_time <- Sys.time()
CARD_obj = CARD_deconvolution(CARD_object = CARD_obj)
end_time <- Sys.time()
cat("Execution time:", end_time - start_time, "\n")
head(CARD_obj@Proportion_CARD)
write.csv(CARD_obj@Proportion_CARD, file = "results/simulation1/Proportion_CARD.csv")
knitr::opts_chunk$set(echo = TRUE)
setwd("F:/Ziqian Zheng/Spotiphy_data/SCRNA/CytoSpace")
library(Seurat)
library(anndata)
generate_cytospace_from_scRNA_seurat_object <- function(scrna_seurat, dir_out='',fout_prefix='', rna_assay='RNA', annotation='majortype'){
scrna_count <- as.data.frame(as.matrix(GetAssayData(object = scrna_seurat, slot = "counts", assay = rna_assay)))
cell_names <- colnames(scrna_count)
scrna_count <- cbind(rownames(scrna_count), scrna_count)
colnames(scrna_count)[1] <- 'GENES'
cell_type_labels <- scrna_seurat@meta.data[, annotation, drop=F]
rownames(cell_type_labels) <- cell_names
cell_type_labels <- cbind(rownames(cell_type_labels), cell_type_labels)
colnames(cell_type_labels) <- c('Cell IDs', 'CellType')
print("Writing output to file")
if(nchar(dir_out)>0){
dir.create(dir_out, showWarnings = FALSE)
fout_scrna <- paste0(dir_out,'/',fout_prefix,'scRNA_data.txt')
fout_labels <- paste0(dir_out,'/',fout_prefix,'cell_type_labels.txt')
} else{
fout_scrna <- paste0(fout_prefix,'scRNA_data.txt')
fout_labels <- paste0(fout_prefix,'cell_type_labels.txt')
}
fwrite(scrna_count, fout_scrna, row.names = F, sep='\t', quote = F)
fwrite(cell_type_labels, file = fout_labels, row.names = F, sep='\t', quote = F)
print("Done")
}
generate_cytospace_from_ST_seurat_object <- function(st_seurat, dir_out='', fout_prefix='', slice='slice1'){
ST_expressions <- as.matrix(st_seurat@assays$Spatial@counts)
ST_expressions <- cbind(rownames(ST_expressions), ST_expressions)
colnames(ST_expressions)[1] <- 'GENES'
coordinates_raw <- st_seurat@images[[slice]]@coordinates
coordinates <- coordinates_raw[,c('row','col')]
coordinates <- cbind(rownames(coordinates), coordinates)
colnames(coordinates)[1] <- 'Spot ID'
print("Writing output to file")
if(nchar(dir_out)>0){
dir.create(dir_out, showWarnings = FALSE)
fout_st <- paste0(dir_out,'/',fout_prefix,'ST_data.txt')
fout_coords <- paste0(dir_out,'/',fout_prefix,'Coordinates.txt')
} else{
fout_st <- paste0(fout_prefix,'ST_data.txt')
fout_coords <- paste0(fout_prefix,'Coordinates.txt')
}
fwrite(ST_expressions, fout_st, row.names = F, sep='\t', quote = F)
fwrite(coordinates, file = fout_coords, row.names = F, sep='\t', quote = F)
print("Done")
}
ST <- read_h5ad("F:/Ziqian Zheng/Spotiphy_data/Simulated ST/Simulated_ST_221_1.h5ad")
ST_expressions <- ST$X
rownames(ST_expressions)[1:5]
ST_expressions <- t(ST_expressions)
ST_expressions <- t(as.matrix(ST_expressions))
rownames(ST_expressions)[1:5]
ST_expressions <- cbind(rownames(ST_expressions), ST_expressions)
colnames(ST_expressions)[1:5]
colnames(ST_expressions)[1] <- 'GENES'
ST$obsm
coordinates_raw = ST$obsm$spatial
colnames(coordinates_raw) = c('row','col')
rownames(coordinates)[1:5]
spot_name = ST$obs_names
coordinates <- cbind(ST$obs_names, coordinates)
coordinates = ST$obsm$spatial
colnames(coordinates) = c('row','col')
coordinates <- cbind(ST$obs_names, coordinates)
colnames(coordinates)[1] <- 'Spot ID'
dir_out <- ""
fout_prefix <- ""
if(nchar(dir_out)>0){
dir.create(dir_out, showWarnings = FALSE)
fout_st <- paste0(dir_out,'/',fout_prefix,'ST_data.txt')
fout_coords <- paste0(dir_out,'/',fout_prefix,'Coordinates.txt')
} else{
fout_st <- paste0(fout_prefix,'ST_data.txt')
fout_coords <- paste0(fout_prefix,'Coordinates.txt')
}
fwrite(ST_expressions, fout_st, row.names = F, sep='\t', quote = F)
setwd("F:/Ziqian Zheng/Spotiphy_data/SCRNA/CytoSpace")
library(Seurat)
library(anndata)
library(data.table)
generate_cytospace_from_scRNA_seurat_object <- function(scrna_seurat, dir_out='',fout_prefix='', rna_assay='RNA', annotation='majortype'){
scrna_count <- as.data.frame(as.matrix(GetAssayData(object = scrna_seurat, slot = "counts", assay = rna_assay)))
cell_names <- colnames(scrna_count)
scrna_count <- cbind(rownames(scrna_count), scrna_count)
colnames(scrna_count)[1] <- 'GENES'
cell_type_labels <- scrna_seurat@meta.data[, annotation, drop=F]
rownames(cell_type_labels) <- cell_names
cell_type_labels <- cbind(rownames(cell_type_labels), cell_type_labels)
colnames(cell_type_labels) <- c('Cell IDs', 'CellType')
print("Writing output to file")
if(nchar(dir_out)>0){
dir.create(dir_out, showWarnings = FALSE)
fout_scrna <- paste0(dir_out,'/',fout_prefix,'scRNA_data.txt')
fout_labels <- paste0(dir_out,'/',fout_prefix,'cell_type_labels.txt')
} else{
fout_scrna <- paste0(fout_prefix,'scRNA_data.txt')
fout_labels <- paste0(fout_prefix,'cell_type_labels.txt')
}
fwrite(scrna_count, fout_scrna, row.names = F, sep='\t', quote = F)
fwrite(cell_type_labels, file = fout_labels, row.names = F, sep='\t', quote = F)
print("Done")
}
generate_cytospace_from_ST_seurat_object <- function(st_seurat, dir_out='', fout_prefix='', slice='slice1'){
ST_expressions <- as.matrix(st_seurat@assays$Spatial@counts)
ST_expressions <- cbind(rownames(ST_expressions), ST_expressions)
colnames(ST_expressions)[1] <- 'GENES'
coordinates_raw <- st_seurat@images[[slice]]@coordinates
coordinates <- coordinates_raw[,c('row','col')]
coordinates <- cbind(rownames(coordinates), coordinates)
colnames(coordinates)[1] <- 'Spot ID'
print("Writing output to file")
if(nchar(dir_out)>0){
dir.create(dir_out, showWarnings = FALSE)
fout_st <- paste0(dir_out,'/',fout_prefix,'ST_data.txt')
fout_coords <- paste0(dir_out,'/',fout_prefix,'Coordinates.txt')
} else{
fout_st <- paste0(fout_prefix,'ST_data.txt')
fout_coords <- paste0(fout_prefix,'Coordinates.txt')
}
fwrite(ST_expressions, fout_st, row.names = F, sep='\t', quote = F)
fwrite(coordinates, file = fout_coords, row.names = F, sep='\t', quote = F)
print("Done")
}
fwrite(ST_expressions, fout_st, row.names = F, sep='\t', quote = F)
fwrite(ST_expressions, fout_st, row.names = F, sep='\t', quote = F)
fwrite(coordinates, file = fout_coords, row.names = F, sep='\t', quote = F)
coordinates = ST$obs[,c('row','col')]
ST$obs
coordinates = ST$obs[,c('array_row','array_col')]
colnames(coordinates) = c('row','col')
coordinates <- cbind(ST$obs_names, coordinates)
colnames(coordinates)[1] <- 'Spot ID'
dir_out <- ""
fout_prefix <- ""
if(nchar(dir_out)>0){
dir.create(dir_out, showWarnings = FALSE)
fout_st <- paste0(dir_out,'/',fout_prefix,'ST_data.txt')
fout_coords <- paste0(dir_out,'/',fout_prefix,'Coordinates.txt')
} else{
fout_st <- paste0(fout_prefix,'ST_data.txt')
fout_coords <- paste0(fout_prefix,'Coordinates.txt')
}
fwrite(coordinates, file = fout_coords, row.names = F, sep='\t', quote = F)
knitr::opts_chunk$set(echo = TRUE)
setwd("F:/Ziqian Zheng/Spotiphy_data/SCRNA/CytoSpace")
library(Seurat)
library(anndata)
library(data.table)
generate_cytospace_from_scRNA_seurat_object <- function(scrna_seurat, dir_out='',fout_prefix='', rna_assay='RNA', annotation='majortype'){
scrna_count <- as.data.frame(as.matrix(GetAssayData(object = scrna_seurat, slot = "counts", assay = rna_assay)))
cell_names <- colnames(scrna_count)
scrna_count <- cbind(rownames(scrna_count), scrna_count)
colnames(scrna_count)[1] <- 'GENES'
cell_type_labels <- scrna_seurat@meta.data[, annotation, drop=F]
rownames(cell_type_labels) <- cell_names
cell_type_labels <- cbind(rownames(cell_type_labels), cell_type_labels)
colnames(cell_type_labels) <- c('Cell IDs', 'CellType')
print("Writing output to file")
if(nchar(dir_out)>0){
dir.create(dir_out, showWarnings = FALSE)
fout_scrna <- paste0(dir_out,'/',fout_prefix,'scRNA_data.txt')
fout_labels <- paste0(dir_out,'/',fout_prefix,'cell_type_labels.txt')
} else{
fout_scrna <- paste0(fout_prefix,'scRNA_data.txt')
fout_labels <- paste0(fout_prefix,'cell_type_labels.txt')
}
fwrite(scrna_count, fout_scrna, row.names = F, sep='\t', quote = F)
fwrite(cell_type_labels, file = fout_labels, row.names = F, sep='\t', quote = F)
print("Done")
}
generate_cytospace_from_ST_seurat_object <- function(st_seurat, dir_out='', fout_prefix='', slice='slice1'){
ST_expressions <- as.matrix(st_seurat@assays$Spatial@counts)
ST_expressions <- cbind(rownames(ST_expressions), ST_expressions)
colnames(ST_expressions)[1] <- 'GENES'
coordinates_raw <- st_seurat@images[[slice]]@coordinates
coordinates <- coordinates_raw[,c('row','col')]
coordinates <- cbind(rownames(coordinates), coordinates)
colnames(coordinates)[1] <- 'Spot ID'
print("Writing output to file")
if(nchar(dir_out)>0){
dir.create(dir_out, showWarnings = FALSE)
fout_st <- paste0(dir_out,'/',fout_prefix,'ST_data.txt')
fout_coords <- paste0(dir_out,'/',fout_prefix,'Coordinates.txt')
} else{
fout_st <- paste0(fout_prefix,'ST_data.txt')
fout_coords <- paste0(fout_prefix,'Coordinates.txt')
}
fwrite(ST_expressions, fout_st, row.names = F, sep='\t', quote = F)
fwrite(coordinates, file = fout_coords, row.names = F, sep='\t', quote = F)
print("Done")
}
start_time <- Sys.time()
ST <- read_h5ad("F:/Ziqian Zheng/Spotiphy_data/Simulated ST/Simulated_ST_221_1.h5ad")
ST_expressions <- ST$X
ST_expressions <- t(as.matrix(ST_expressions))
ST_expressions <- cbind(rownames(ST_expressions), ST_expressions)
colnames(ST_expressions)[1] <- 'GENES'
coordinates = ST$obs[,c('array_row','array_col')]
colnames(coordinates) = c('row','col')
coordinates <- cbind(ST$obs_names, coordinates)
colnames(coordinates)[1] <- 'Spot ID'
dir_out <- ""
fout_prefix <- ""
if(nchar(dir_out)>0){
dir.create(dir_out, showWarnings = FALSE)
fout_st <- paste0(dir_out,'/',fout_prefix,'ST_data.txt')
fout_coords <- paste0(dir_out,'/',fout_prefix,'Coordinates.txt')
} else{
fout_st <- paste0(fout_prefix,'ST_data.txt')
fout_coords <- paste0(fout_prefix,'Coordinates.txt')
}
fwrite(ST_expressions, fout_st, row.names = F, sep='\t', quote = F)
fwrite(coordinates, file = fout_coords, row.names = F, sep='\t', quote = F)
end_time <- Sys.time()
cat("Execution time:", end_time - start_time, "\n")
knitr::opts_chunk$set(echo = TRUE)
spatial_count <- Read10X_h5('F:/Ziqian Zheng/Spotiphy_data/ST/Sample221/outs/raw_feature_bc_matrix.h5', use.names = TRUE, unique.features = TRUE)
spatial_count <- t(as.matrix(spatial_count))
rownames(spatial_count)[1:5]
colnames(spatial_count)[1:5]
dim(spatial_count)
spatial_count <- read_h5ad("F:/Ziqian Zheng/Spotiphy_data/Simulated ST/Simulated_ST_221_1.h5ad")
spatial_count <- as.matrix(spatial_count$X)
rownames(spatial_count)[1:5]
colnames(spatial_count)[1:5]
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/zzheng92/Desktop/BayesPrism")
suppressWarnings(library(BayesPrism))
library(Seurat)
library(anndata)
spatial_count <- read_h5ad("F:/Ziqian Zheng/Spotiphy_data/Simulated ST/Simulated_ST_221_1.h5ad")
spatial_count <- as.matrix(spatial_count$X)
rownames(spatial_count)[1:5]
colnames(spatial_count)[1:5]
dim(spatial_count)
# scRNA <- readRDS("F:/Ziqian Zheng/Spotiphy_data/SCRNA/sum_19plus_anno_updated.rds")
scRNA <- readRDS("F:/Ziqian Zheng/Spatial omics/Public dataset/scRNA/snRNA_159738.rds")
sc_count = t(as.matrix(scRNA@assays$RNA@counts))
rownames(sc_count)[1:5]
colnames(sc_count)[1:5]
dim(sc_count)
cell.type.labels = scRNA@meta.data$Allen.subclass_label
cell.state.labels = scRNA@meta.data$Allen.subclass_label
rm(scRNA)
sort(table(cell.type.labels))
table(cbind.data.frame(cell.state.labels, cell.type.labels))
start_time <- Sys.time()
diff.exp.stat <- get.exp.stat(sc.dat=sc_count[,colSums(sc_count>0)>3],# filter genes to reduce memory use
cell.type.labels=cell.type.labels,
cell.state.labels=cell.state.labels,
psuedo.count=0.1, #a numeric value used for log2 transformation. =0.1 for 10x data, =10 for smart-seq. Default=0.1.
cell.count.cutoff=50, # a numeric value to exclude cell state with number of cells fewer than this value for t test.
n.cores=1 #number of threads
)
sc_count.sig <- select.marker(sc.dat=sc_count.filtered, stat=diff.exp.stat, pval.max=0.001, lfc.min=0.2)
sc_count.sig <- select.marker(sc.dat=sc_count, stat=diff.exp.stat, pval.max=0.001, lfc.min=0.2)
end_time <- Sys.time()
cat("Execution time:", end_time - start_time, "\n")
myPrism <- new.prism(reference=sc_count.sig, mixture=spatial_count, input.type="count.matrix",
cell.type.labels = cell.type.labels, cell.state.labels = cell.state.labels,
key=NULL, outlier.cut=0.01, outlier.fraction=0.1,
)
bp.res <- run.prism(prism = myPrism, n.cores=32)
P <- get.fraction (bp=bp.res, which.theta="final", state.or.type="type")
write.csv(P, file = "results/simulation1/Proportion_221.csv")
saveRDS(bp.res, file = "results/simulation1/results.rds")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/zzheng92/Desktop/RCTD")
library(spacexr)
library(Matrix)
library(Seurat)
scRNA <- readRDS("F:/Ziqian Zheng/Spatial omics/Public dataset/scRNA/snRNA_159738.rds")
sc_count <- as.matrix(scRNA@assays$RNA@counts)
cell_type <- scRNA@meta.data$Allen.subclass_label
indexes <- grep("CR|SMC", cell_type)
sc_count_duplicate <- sc_count[, indexes]
colnames(sc_count_duplicate) <- paste0(colnames(sc_count_duplicate), "_d")
sc_count <- cbind(sc_count, sc_count_duplicate)
cell_type_duplicate <- cell_type[indexes]
cell_type = c(cell_type, cell_type_duplicate)
cell_type <- gsub("/", "", cell_type)
cell_type <- as.factor(cell_type)
names(cell_type) <- colnames(sc_count)
nUMI <- scRNA@meta.data$nUMI
nUMI_duplicate <- nUMI[indexes]
nUMI = c(nUMI, nUMI_duplicate)
names(nUMI) <- colnames(sc_count)
reference <- Reference(sc_count, cell_type, nUMI)
rownames(sc_count)[1:5]
colnames(sc_count)[1:5]
dim(sc_count)
table(reference@cell_types)
spatial_count <- Read10X_h5('F:/Ziqian Zheng/Spotiphy_data/ST/Sample221/outs/raw_feature_bc_matrix.h5', use.names = TRUE, unique.features = TRUE)
spatial_count <- as.matrix(spatial_count)
spatial_location <- read.csv("F:/Ziqian Zheng/Spotiphy_data/ST/Sample221/outs/spatial/tissue_positions_list.csv", header=F, row.names=1)
spatial_location <- spatial_location[, c(4, 5)]
colnames(spatial_location) <- c('x','y')
rownames(spatial_location) <- colnames(spatial_count)
puck <- SpatialRNA(spatial_location, spatial_count)
print(dim(puck@counts)) # observe Digital Gene Expression matrix
hist(log(puck@nUMI,2))
print(head(puck@coords)) # start of coordinate data.frame
barcodes <- colnames(puck@counts) # pixels to be used (a list of barcode names).
# This list can be restricted if you want to crop the puck e.g.
# puck <- restrict_puck(puck, barcodes) provides a basic plot of the nUMI of each pixel
# on the plot:
plot_puck_continuous(puck, barcodes, puck@nUMI, ylimit = c(0,round(quantile(puck@nUMI,0.9))),
title ='plot of nUMI')
myRCTD <- create.RCTD(puck, reference, max_cores = 12)
myRCTD <- run.RCTD(myRCTD, doublet_mode = 'full')
results <- myRCTD@results
norm_weights = normalize_weights(results$weights)
dim(norm_weights)
rownames(norm_weights)[1:5]
write.csv(norm_weights, file = "results/221/Proportion_221.csv")
knitr::opts_chunk$set(echo = TRUE)
saveRDS(myRCTD, file = "results/221/myRCTD.rds")
saveRDS(myRCTD, file = "results/221_160k/myRCTD.rds")
setwd("C:/Users/zzheng92/Desktop/Spotiphy")
Xenium <- readRDS("C:/Users/zzheng92/Desktop/Spotiphy/Xenium.eset.log2.rds")
Xenium.eset.log2 <- readRDS("C:/Users/zzheng92/Desktop/Spotiphy/Xenium.eset.log2.rds")
setwd("C:/Users/zzheng92/Desktop/Spotiphy")
Xenium.eset.log2 <- readRDS("C:/Users/zzheng92/Desktop/Spotiphy/Xenium.eset.log2.rds")
Xenium.eset.log2 <- readRDS("Xenium.eset.log2.rds")
